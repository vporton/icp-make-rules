DESTDIR = out
DFXDIR = .
NETWORK = local
IDENTITY = default
MOFLAGS =
DFXCREATEFLAGS =
DFXINSTALLFLAGS =
# CANISTERS =
# CANISTER_CLASSES =

CANISTERS_SHORT = $(notdir $CANISTERS)
CANISTER_CLASSES_SHORT = $(notdir $CANISTER_CLASSES)

WASM_FILES = $(foreach name,$(CANISTER_CLASSES_SHORT),$(DFXDIR)/.dfx/local/canisters/$(name)/$(name).wasm)

.PHONY: FORCE
FORCE:

# .wasm compilation is slow.
.PRECIOUS: $(WASM_FILES)

.PHONY: deps
deps: $(DESTDIR)/.deps

$(DESTDIR)/.deps: $(MOFILES)
	echo -n > $(DESTDIR)/.deps
	for full in $(CANISTERS); do \
	  short=`basename $$full`; \
	  dir=$(DFXDIR)/.dfx/local/canisters/$$short && \
	  echo "$$dir/$$short.wasm $$dir/$$short.did $$dir/$$short.most: $$short.wasm\n\tdfx build $$short"; \
	done >> $(DESTDIR)/.deps
	for i in $(MOFILES); do \
	  { echo -n "$$i: "; moc --print-deps $$i | awk 'BEGIN {ORS = " "} !/^mo:/ {print $$2}'; echo; } >> $(DESTDIR)/.deps; \
	done

#$(DESTDIR)/%.wasm $(DESTDIR)/%.did $(DESTDIR)/%.most: %.mo
#	mkdir -p $(dir $@)
#	moc $(MOFLAGS) --idl --stable-types `mops sources` -o $@ $<

$(DESTDIR)/%.ts: $(DESTDIR)/%.did
	didc bind -t ts $< > $@

%.install: %.wasm FORCE
	dfx canister create --network=$(NETWORK) --identity=$(IDENTITY) $(DFXCREATEFLAGS) $(DFXCREATEFLAGS_$*) $(*F)
	dfx canister install --network=$(NETWORK) --identity=$(IDENTITY) -m install $(DFXINSTALLFLAGS) $(DFXINSTALLFLAGS_$*) --wasm=$< $(*F)
	$(ICPRULESDIR)/store-canister.py $(*F) `dfx canister id $(*F)`

%.upgrade: %.wasm %.most FORCE
	TMPDIR=`mktemp -d` && \
	  trap 'rm -rf $$TMPDIR' EXIT && \
	  dfx canister metadata stresser motoko:stable-types > $$TMPDIR/interface.most && \
	  echo && \
	  { \
	    moc --stable-compatible $$TMPDIR/interface.most $*.most || \
	    { echo "\nWARNING!\nStable interface compatibility check failed for canister '$(*F)'.\nUpgrade will either FAIL or LOSE some stable variable data.\n"; \
		  read -r -p "Do you want to proceed? (yes/No) " REPLY; test "$$REPLY" = yes; }; \
	  }
	dfx canister install --network=$(NETWORK) --identity=$(IDENTITY) -m upgrade -y $(DFXINSTALLFLAGS) $(DFXINSTALLFLAGS_$*) --wasm=$< $(*F)

%.deploy: FORCE
	if dfx canister id $(*F) 2>/dev/null; then \
	  $(MAKE) $*.upgrade; \
	else \
	  $(MAKE) $*.install; \
	fi

-include $(DESTDIR)/.deps
